syntax = "proto3";
package rental.v1;
option go_package = "coolcar/rental/api/gen/v1;rentalpb";

message Location {
  double latitude = 1;
  double longitude = 2;
}

message LocationStatus {
  Location location = 1;
  string location_name = 2;
  double km_driven = 3;
  int32  fee_cent = 4;
  int64 timestamp_sec = 5;
}

enum TripStatus {
  TS_NOT_SPECIFIED = 0;
  IN_PROGRESS = 1;
  FINISHED = 2;
}

message Trip {
  string account_id = 1;
  string gun_id = 2;
  LocationStatus start = 3;
  LocationStatus current = 4;
  LocationStatus end = 5;
  TripStatus status = 6;
  string identity_id = 7;
}

message TripEntity {
  string id = 1;
  Trip trip = 2;
}

message CreateTripRequest {
  Location start = 1;
  string gun_id = 2;
  string avatar_url = 3;
}

message GetTripRequest {
  string id = 1;
}

message GetTripListRequest {
  TripStatus status = 1;
}

message GetTripListResponse {
  repeated TripEntity trip_list = 1;
}

message UpdateTripRequest {
  string id = 1;
  LocationStatus current = 2;
  bool end_trip = 3;
}

service TripService {
  rpc CreateTrip (CreateTripRequest) returns (TripEntity);
  rpc GetTrip (GetTripRequest) returns (Trip);
  rpc GetTripList (GetTripListRequest) returns (GetTripListResponse);
  rpc UpdateTrip (UpdateTripRequest) returns (Trip);
}

enum Gender {
  G_NOT_SPECIFIED = 0;
  MALE = 1;
  FEMALE = 2;
}
message Identity {
  string lic_number = 1;
  string name = 2;
  Gender gender = 3;
  int64 birth_data_millis = 4;
}

enum IdentityStatus {
  UN_SUBMITTED = 0;
  PENDING = 1;
  VERIFIED = 2;
}

message Profile {
    Identity identity = 1;
    IdentityStatus identity_status = 2;
}

message GetProfileRequest {}
message ClearProfileRequest {}

message GetProfilePhotoRequest {}
message GetProfilePhotoResponse {
  string url = 1;
}

message CreateProfileRequest {}
message CreateProfilePhotoResponse {
  string upload_url = 1;
}

message CompleteProfileRequest {}
message ClearProfilePhotoRequest {}
message ClearProfilePhotoResponse {}

service ProfileService {
  rpc GetProfile (GetProfileRequest) returns (Profile);
  rpc SubmitProfile (Identity) returns (Profile);
  rpc ClearProfile (ClearProfileRequest) returns (Profile);

  rpc GetProfilePhoto (GetProfilePhotoRequest) returns (GetProfilePhotoResponse);
  rpc CreateProfilePhoto (CreateProfileRequest) returns (CreateProfilePhotoResponse);
  rpc CompleteProfilePhoto (CompleteProfileRequest) returns (Identity);
  rpc ClearProfilePhoto (ClearProfilePhotoRequest) returns (ClearProfilePhotoResponse);
}